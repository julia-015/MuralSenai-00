{"version":3,"sources":["image.ts"],"names":["resizeImage","width","imgWidth","height","imgHeight","rw","rh"],"mappings":"AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,WAAW,GAAG,CACzB;AAAEC,EAAAA,KAAK,EAAEC,QAAT;AAAmBC,EAAAA,MAAM,EAAEC;AAA3B,CADyB,EAEzB;AAAEH,EAAAA,KAAF;AAASE,EAAAA;AAAT,CAFyB,KAGhB;AACT,QAAME,EAAE,GAAGH,QAAQ,GAAGD,KAAtB;AACA,QAAMK,EAAE,GAAGF,SAAS,GAAGD,MAAvB;;AAEA,MAAIE,EAAE,GAAGC,EAAT,EAAa;AACX,WAAO;AACLL,MAAAA,KAAK,EAAEA,KADF;AAELE,MAAAA,MAAM,EAAEC,SAAS,GAAGC;AAFf,KAAP;AAID,GALD,MAKO;AACL,WAAO;AACLJ,MAAAA,KAAK,EAAEC,QAAQ,GAAGI,EADb;AAELH,MAAAA,MAAM,EAAEA;AAFH,KAAP;AAID;AACF,CAlBM","sourcesContent":["type Size = { width: number; height: number };\n\n/**\n * calculates the size of the image, how it would stretch to the borders of the container,\n * while maintaining its proportions (Image -> resizeMode=\"contain\")\n */\nexport const resizeImage = (\n  { width: imgWidth, height: imgHeight }: Size, // original image size\n  { width, height }: Size // target image size\n): Size => {\n  const rw = imgWidth / width;\n  const rh = imgHeight / height;\n\n  if (rw > rh) {\n    return {\n      width: width,\n      height: imgHeight / rw,\n    };\n  } else {\n    return {\n      width: imgWidth / rh,\n      height: height,\n    };\n  }\n};\n"]}